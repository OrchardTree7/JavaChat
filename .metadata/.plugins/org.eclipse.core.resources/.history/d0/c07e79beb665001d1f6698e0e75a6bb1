import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

public class GameClientView extends JFrame {

	private static final long serialVersionUID = 1L;

	private JPanel contentPane;
	private JScrollPane serverListScrollPane = new JScrollPane();
	private JLabel lblServerListTitle = new JLabel("방 목록");
	private JPanel serverListPanel = new JPanel();
	private JScrollPane userListScrollPane = new JScrollPane();
	private JLabel lblUserListTitle = new JLabel("유저 목록");
	private JScrollPane openChatScrollPane = new JScrollPane();
	private JLabel lblChatListTitle = new JLabel("공개 채팅");
	private JButton btnExit = new JButton("종료");
	private JButton btnEstablish = new JButton("방 개설");
	private JTextPane openChatTextArea = new JTextPane();
	private JTextPane userListTextArea = new JTextPane();

	private static final int BUF_LEN = 128; // Windows 처럼 BUF_LEN 을 정의
	private Socket socket; // 연결소켓
	private InputStream is;
	private OutputStream os;
	private DataInputStream dis;
	private DataOutputStream dos;

	private String userName;
	private String ipAddr;
	private String portNum;
	private String[] dataArr;
	private int roomSize = 0;

	private ObjectInputStream ois;
	private ObjectOutputStream oos;
	private JTextField chatTextField;

	/**
	 * Create the application.
	 */
	public GameClientView(String username, String ip_addr, String port_no) {
		userName = username;
		ipAddr = ip_addr;
		portNum = port_no;

		try {
			socket = new Socket(ip_addr, Integer.parseInt(port_no));
//			is = socket.getInputStream();
//			dis = new DataInputStream(is);
//			os = socket.getOutputStream();
//			dos = new DataOutputStream(os);

			oos = new ObjectOutputStream(socket.getOutputStream());
			oos.flush();
			ois = new ObjectInputStream(socket.getInputStream());

			// SendMessage("/login " + UserName);
			ChatMsg obcm = new ChatMsg(userName, "100", "Hello");
			SendObject(obcm);
			Object ob = null;
			ChatMsg cm = null;
			try {
				ob = ois.readObject();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			cm = (ChatMsg) ob;
			roomSize = Integer.parseInt(cm.data);

			for (int i = 0; i < roomSize; i++) {
				try {
					ob = ois.readObject();
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				cm = (ChatMsg) ob;
				dataArr = cm.data.split(" ");
				JButton btnNewButton = new JButton(dataArr[0]);
				String port = dataArr[1];
				serverListPanel.add(btnNewButton);
				btnNewButton.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						ChatClientViewInChat view = new ChatClientViewInChat(username, ip_addr, port);
						setVisible(false);
					}

				});
			}
		} catch (NumberFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			AppendText("connect error");
		}

		ListenNetwork net = new ListenNetwork();
		net.start();

		initialize();
	}

	/**
	 * ; Initialize the contents of the frame.
	 */
	private void initialize() {

		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 617, 548);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		serverListScrollPane.setBounds(12, 12, 363, 349);
		getContentPane().add(serverListScrollPane);

		lblServerListTitle.setHorizontalAlignment(SwingConstants.CENTER);
		serverListScrollPane.setColumnHeaderView(lblServerListTitle);

		serverListScrollPane.setViewportView(serverListPanel);
		serverListPanel.setLayout(new BoxLayout(serverListPanel, BoxLayout.Y_AXIS));

		userListScrollPane.setBounds(387, 12, 219, 349);
		getContentPane().add(userListScrollPane);

		lblUserListTitle.setHorizontalAlignment(SwingConstants.CENTER);
		userListScrollPane.setColumnHeaderView(lblUserListTitle);

		userListScrollPane.setViewportView(userListTextArea);

		openChatScrollPane.setBounds(12, 373, 363, 120);
		getContentPane().add(openChatScrollPane);

		lblChatListTitle.setHorizontalAlignment(SwingConstants.CENTER);
		openChatScrollPane.setColumnHeaderView(lblChatListTitle);

		openChatScrollPane.setViewportView(openChatTextArea);

		btnExit.setBounds(387, 447, 219, 62);
		getContentPane().add(btnExit);
		btnExit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				ChatMsg msg = new ChatMsg(userName, "400", "Bye");
				SendObject(msg);
				System.exit(0);
			}
		});

		btnEstablish.setBounds(387, 373, 219, 62);
		contentPane.add(btnEstablish);

		chatTextField = new JTextField();
		chatTextField.setBounds(77, 499, 298, 18);
		contentPane.add(chatTextField);
		chatTextField.setColumns(10);
		chatTextField.addActionListener(new TextSendAction());

		JLabel lblUserID = new JLabel(userName);
		lblUserID.setBounds(12, 499, 59, 18);
		contentPane.add(lblUserID);
		btnEstablish.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				ChatClientEstablishView view = new ChatClientEstablishView();
				view.addWindowListener(new WindowAdapter() {
					@Override
					public void windowDeactivated(WindowEvent e) {
						// TODO Auto-generated method stub
						String serverName = view.getServerName();
						ChatMsg msg = new ChatMsg(userName, "301", "Establish " + serverName);
						SendObject(msg);
					}

				});
			}
		});
		setVisible(true);
	}

	// Server Message를 수신해서 화면에 표시
	class ListenNetwork extends Thread {
		@Override
		public void run() {
			while (true) {
				try {

					Object obcm = null;
					String msg = null;
					ChatMsg cm;
					try {
						obcm = ois.readObject();
					} catch (ClassNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						break;
					}
					if (obcm == null)
						break;
					if (obcm instanceof ChatMsg) {
						cm = (ChatMsg) obcm;
						msg = String.format("[%s]\n%s", cm.UserName, cm.data);
					} else
						continue;
					switch (cm.code) {
					case "200": // chat message
						if (cm.UserName.equals(userName))
							AppendText(msg); // 내 메세지는 우측에
						else
							AppendText(msg);
						break;
					case "301":
						String port = cm.data;
						ChatClientViewInChat view = new ChatClientViewInChat(userName, ipAddr, port);
						setVisible(false);
						break;
					}
				} catch (IOException e) {
					AppendText("ois.readObject() error");
					try {
//							dos.close();
//							dis.close();
						ois.close();
						oos.close();
						socket.close();

						break;
					} catch (Exception ee) {
						break;
					} // catch문 끝
				} // 바깥 catch문끝

			}
		}
	}

	// 화면에 출력
	public void AppendText(String msg) {
		// textArea.append(msg + "\n");
		// AppendIcon(icon1);
		msg = msg.trim(); // 앞뒤 blank와 \n을 제거한다.
		// textArea.setCaretPosition(len);
		// textArea.replaceSelection(msg + "\n");

		StyledDocument doc = openChatTextArea.getStyledDocument();
		SimpleAttributeSet left = new SimpleAttributeSet();
		StyleConstants.setAlignment(left, StyleConstants.ALIGN_LEFT);
		StyleConstants.setForeground(left, Color.BLACK);
		doc.setParagraphAttributes(doc.getLength(), 1, left, false);
		try {
			doc.insertString(doc.getLength(), msg + "\n", left);
		} catch (BadLocationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		int len = openChatTextArea.getDocument().getLength();
		openChatTextArea.setCaretPosition(len);
		// textArea.replaceSelection("\n");
	}

	// Server에게 network으로 전송
	public void SendMessage(String msg) {
		try {
			// dos.writeUTF(msg);
//			byte[] bb;
//			bb = MakePacket(msg);
//			dos.write(bb, 0, bb.length);
			ChatMsg obcm = new ChatMsg(userName, "200", msg);
			oos.writeObject(obcm);
		} catch (IOException e) {
			// AppendText("dos.write() error");
			AppendText("oos.writeObject() error");
			try {
//				dos.close();
//				dis.close();
				ois.close();
				oos.close();
				socket.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				System.exit(0);
			}
		}
	}

	public void SendObject(Object ob) { // 서버로 메세지를 보내는 메소드
		try {
			oos.writeObject(ob);
		} catch (IOException e) {
			// textArea.append("메세지 송신 에러!!\n");
			AppendText("SendObject Error");
		}
	}

	// keyboard enter key 치면 서버로 전송
	class TextSendAction implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			// Send button을 누르거나 메시지 입력하고 Enter key 치면
			if (e.getSource() == chatTextField) {
				String msg = null;
				// msg = String.format("[%s] %s\n", UserName, txtInput.getText());
				msg = chatTextField.getText();
				SendMessage(msg);
				chatTextField.setText(""); // 메세지를 보내고 나면 메세지 쓰는창을 비운다.
				chatTextField.requestFocus(); // 메세지를 보내고 커서를 다시 텍스트 필드로 위치시킨다
				if (msg.contains("/exit")) // 종료 처리
					System.exit(0);
			}
		}
	}
}
